/**
 * generated by Xtext 2.19.0
 */
package org.xtext.dsl.multimaven.multiMaven.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.dsl.multimaven.multiMaven.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MultiMavenFactoryImpl extends EFactoryImpl implements MultiMavenFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MultiMavenFactory init()
  {
    try
    {
      MultiMavenFactory theMultiMavenFactory = (MultiMavenFactory)EPackage.Registry.INSTANCE.getEFactory(MultiMavenPackage.eNS_URI);
      if (theMultiMavenFactory != null)
      {
        return theMultiMavenFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MultiMavenFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultiMavenFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MultiMavenPackage.PROYECTO: return createProyecto();
      case MultiMavenPackage.DIRECTORIO_PADRE: return createDirectorioPadre();
      case MultiMavenPackage.DIRECTORIO: return createDirectorio();
      case MultiMavenPackage.DEPENDENCIA: return createDependencia();
      case MultiMavenPackage.PLUGIN: return createPlugin();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MultiMavenPackage.PACKAGING:
        return createPackagingFromString(eDataType, initialValue);
      case MultiMavenPackage.SCOPE:
        return createScopeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MultiMavenPackage.PACKAGING:
        return convertPackagingToString(eDataType, instanceValue);
      case MultiMavenPackage.SCOPE:
        return convertScopeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proyecto createProyecto()
  {
    ProyectoImpl proyecto = new ProyectoImpl();
    return proyecto;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DirectorioPadre createDirectorioPadre()
  {
    DirectorioPadreImpl directorioPadre = new DirectorioPadreImpl();
    return directorioPadre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directorio createDirectorio()
  {
    DirectorioImpl directorio = new DirectorioImpl();
    return directorio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dependencia createDependencia()
  {
    DependenciaImpl dependencia = new DependenciaImpl();
    return dependencia;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plugin createPlugin()
  {
    PluginImpl plugin = new PluginImpl();
    return plugin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Packaging createPackagingFromString(EDataType eDataType, String initialValue)
  {
    Packaging result = Packaging.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPackagingToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Scope createScopeFromString(EDataType eDataType, String initialValue)
  {
    Scope result = Scope.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertScopeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiMavenPackage getMultiMavenPackage()
  {
    return (MultiMavenPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MultiMavenPackage getPackage()
  {
    return MultiMavenPackage.eINSTANCE;
  }

} //MultiMavenFactoryImpl

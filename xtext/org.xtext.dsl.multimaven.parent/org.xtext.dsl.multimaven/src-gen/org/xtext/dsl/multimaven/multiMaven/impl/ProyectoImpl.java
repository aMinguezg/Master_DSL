/**
 * generated by Xtext 2.19.0
 */
package org.xtext.dsl.multimaven.multiMaven.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.dsl.multimaven.multiMaven.DirectorioPadre;
import org.xtext.dsl.multimaven.multiMaven.MultiMavenPackage;
import org.xtext.dsl.multimaven.multiMaven.Proyecto;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Proyecto</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.dsl.multimaven.multiMaven.impl.ProyectoImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link org.xtext.dsl.multimaven.multiMaven.impl.ProyectoImpl#getPadre <em>Padre</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProyectoImpl extends MinimalEObjectImpl.Container implements Proyecto
{
  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getPadre() <em>Padre</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPadre()
   * @generated
   * @ordered
   */
  protected DirectorioPadre padre;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProyectoImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MultiMavenPackage.Literals.PROYECTO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MultiMavenPackage.PROYECTO__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DirectorioPadre getPadre()
  {
    return padre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPadre(DirectorioPadre newPadre, NotificationChain msgs)
  {
    DirectorioPadre oldPadre = padre;
    padre = newPadre;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MultiMavenPackage.PROYECTO__PADRE, oldPadre, newPadre);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPadre(DirectorioPadre newPadre)
  {
    if (newPadre != padre)
    {
      NotificationChain msgs = null;
      if (padre != null)
        msgs = ((InternalEObject)padre).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MultiMavenPackage.PROYECTO__PADRE, null, msgs);
      if (newPadre != null)
        msgs = ((InternalEObject)newPadre).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MultiMavenPackage.PROYECTO__PADRE, null, msgs);
      msgs = basicSetPadre(newPadre, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MultiMavenPackage.PROYECTO__PADRE, newPadre, newPadre));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MultiMavenPackage.PROYECTO__PADRE:
        return basicSetPadre(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MultiMavenPackage.PROYECTO__VERSION:
        return getVersion();
      case MultiMavenPackage.PROYECTO__PADRE:
        return getPadre();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MultiMavenPackage.PROYECTO__VERSION:
        setVersion((String)newValue);
        return;
      case MultiMavenPackage.PROYECTO__PADRE:
        setPadre((DirectorioPadre)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MultiMavenPackage.PROYECTO__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case MultiMavenPackage.PROYECTO__PADRE:
        setPadre((DirectorioPadre)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MultiMavenPackage.PROYECTO__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case MultiMavenPackage.PROYECTO__PADRE:
        return padre != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (version: ");
    result.append(version);
    result.append(')');
    return result.toString();
  }

} //ProyectoImpl

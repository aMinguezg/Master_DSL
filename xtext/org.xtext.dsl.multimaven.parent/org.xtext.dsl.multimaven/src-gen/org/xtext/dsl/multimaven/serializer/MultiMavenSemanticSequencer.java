/*
 * generated by Xtext 2.19.0
 */
package org.xtext.dsl.multimaven.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.dsl.multimaven.multiMaven.Dependencia;
import org.xtext.dsl.multimaven.multiMaven.Directorio;
import org.xtext.dsl.multimaven.multiMaven.DirectorioPadre;
import org.xtext.dsl.multimaven.multiMaven.MultiMavenPackage;
import org.xtext.dsl.multimaven.multiMaven.Plugin;
import org.xtext.dsl.multimaven.multiMaven.Proyecto;
import org.xtext.dsl.multimaven.services.MultiMavenGrammarAccess;

@SuppressWarnings("all")
public class MultiMavenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MultiMavenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MultiMavenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MultiMavenPackage.DEPENDENCIA:
				sequence_Dependencia(context, (Dependencia) semanticObject); 
				return; 
			case MultiMavenPackage.DIRECTORIO:
				sequence_Directorio(context, (Directorio) semanticObject); 
				return; 
			case MultiMavenPackage.DIRECTORIO_PADRE:
				sequence_DirectorioPadre(context, (DirectorioPadre) semanticObject); 
				return; 
			case MultiMavenPackage.PLUGIN:
				sequence_Plugin(context, (Plugin) semanticObject); 
				return; 
			case MultiMavenPackage.PROYECTO:
				sequence_Proyecto(context, (Proyecto) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Dependencia returns Dependencia
	 *
	 * Constraint:
	 *     (group=GROUP artifcat=ARTIFACT version=VERSION scope=Scope?)
	 */
	protected void sequence_Dependencia(ISerializationContext context, Dependencia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DirectorioPadre returns DirectorioPadre
	 *
	 * Constraint:
	 *     (
	 *         path=PATH 
	 *         group=GROUP 
	 *         artifcat=ARTIFACT 
	 *         version=VERSION 
	 *         packaging=Packaging? 
	 *         dependencias+=Dependencia* 
	 *         plugins+=Plugin* 
	 *         directorios+=Directorio*
	 *     )
	 */
	protected void sequence_DirectorioPadre(ISerializationContext context, DirectorioPadre semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Directorio returns Directorio
	 *
	 * Constraint:
	 *     (
	 *         name=IdDirectorio 
	 *         group=GROUP 
	 *         artifcat=ARTIFACT 
	 *         version=VERSION 
	 *         packaging=Packaging? 
	 *         dependencias+=Dependencia* 
	 *         plugins+=Plugin*
	 *     )
	 */
	protected void sequence_Directorio(ISerializationContext context, Directorio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plugin returns Plugin
	 *
	 * Constraint:
	 *     (group=GROUP artifcat=ARTIFACT version=VERSION)
	 */
	protected void sequence_Plugin(ISerializationContext context, Plugin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MultiMavenPackage.Literals.PLUGIN__GROUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MultiMavenPackage.Literals.PLUGIN__GROUP));
			if (transientValues.isValueTransient(semanticObject, MultiMavenPackage.Literals.PLUGIN__ARTIFCAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MultiMavenPackage.Literals.PLUGIN__ARTIFCAT));
			if (transientValues.isValueTransient(semanticObject, MultiMavenPackage.Literals.PLUGIN__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MultiMavenPackage.Literals.PLUGIN__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPluginAccess().getGroupGROUPTerminalRuleCall_2_0(), semanticObject.getGroup());
		feeder.accept(grammarAccess.getPluginAccess().getArtifcatARTIFACTTerminalRuleCall_4_0(), semanticObject.getArtifcat());
		feeder.accept(grammarAccess.getPluginAccess().getVersionVERSIONTerminalRuleCall_6_0(), semanticObject.getVersion());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Proyecto returns Proyecto
	 *
	 * Constraint:
	 *     (version=VERSION padre=DirectorioPadre)
	 */
	protected void sequence_Proyecto(ISerializationContext context, Proyecto semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MultiMavenPackage.Literals.PROYECTO__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MultiMavenPackage.Literals.PROYECTO__VERSION));
			if (transientValues.isValueTransient(semanticObject, MultiMavenPackage.Literals.PROYECTO__PADRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MultiMavenPackage.Literals.PROYECTO__PADRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProyectoAccess().getVersionVERSIONTerminalRuleCall_2_0(), semanticObject.getVersion());
		feeder.accept(grammarAccess.getProyectoAccess().getPadreDirectorioPadreParserRuleCall_3_0(), semanticObject.getPadre());
		feeder.finish();
	}
	
	
}
